"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cookies-next";
exports.ids = ["vendor-chunks/cookies-next"];
exports.modules = {

/***/ "(ssr)/./node_modules/cookies-next/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/cookies-next/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkCookies = exports.hasCookie = exports.removeCookies = exports.deleteCookie = exports.setCookies = exports.setCookie = exports.getCookie = exports.getCookies = void 0;\nvar cookie_1 = __webpack_require__(/*! cookie */ \"(ssr)/./node_modules/cookie/index.js\");\nvar isClientSide = function() {\n    return \"undefined\" !== \"undefined\";\n};\nvar processValue = function(value) {\n    if (value === \"true\") return true;\n    if (value === \"false\") return false;\n    if (value === \"undefined\") return undefined;\n    if (value === \"null\") return null;\n    return value;\n};\nvar stringify = function(value) {\n    if (value === void 0) {\n        value = \"\";\n    }\n    try {\n        var result = JSON.stringify(value);\n        return /^[\\{\\[]/.test(result) ? result : value;\n    } catch (e) {\n        return value;\n    }\n};\nvar decode = function(str) {\n    if (!str) return str;\n    return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar getCookies = function(options) {\n    var req;\n    if (options) req = options.req;\n    if (!isClientSide()) {\n        // if cookie-parser is used in project get cookies from ctx.req.cookies\n        // if cookie-parser isn't used in project get cookies from ctx.req.headers.cookie\n        if (req && req.cookies) return req.cookies;\n        if (req && req.headers && req.headers.cookie) return (0, cookie_1.parse)(req.headers.cookie);\n        return {};\n    }\n    var _cookies = {};\n    var documentCookies = document.cookie ? document.cookie.split(\"; \") : [];\n    for(var i = 0, len = documentCookies.length; i < len; i++){\n        var cookieParts = documentCookies[i].split(\"=\");\n        var _cookie = cookieParts.slice(1).join(\"=\");\n        var name_1 = cookieParts[0];\n        _cookies[name_1] = _cookie;\n    }\n    return _cookies;\n};\nexports.getCookies = getCookies;\nvar getCookie = function(key, options) {\n    var _cookies = (0, exports.getCookies)(options);\n    var value = _cookies[key];\n    if (value === undefined) return undefined;\n    return processValue(decode(value));\n};\nexports.getCookie = getCookie;\nvar setCookie = function(key, data, options) {\n    var _cookieOptions;\n    var _req;\n    var _res;\n    if (options) {\n        var req = options.req, res = options.res, _options = __rest(options, [\n            \"req\",\n            \"res\"\n        ]);\n        _req = req;\n        _res = res;\n        _cookieOptions = _options;\n    }\n    var cookieStr = (0, cookie_1.serialize)(key, stringify(data), __assign({\n        path: \"/\"\n    }, _cookieOptions));\n    if (!isClientSide()) {\n        if (_res && _req) {\n            var currentCookies = _res.getHeader(\"Set-Cookie\");\n            if (!Array.isArray(currentCookies)) {\n                currentCookies = !currentCookies ? [] : [\n                    String(currentCookies)\n                ];\n            }\n            _res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n            if (_req && _req.cookies) {\n                var _cookies = _req.cookies;\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n            }\n            if (_req && _req.headers && _req.headers.cookie) {\n                var _cookies = (0, cookie_1.parse)(_req.headers.cookie);\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n                _req.headers.cookie = Object.entries(_cookies).reduce(function(accum, item) {\n                    return accum.concat(\"\".concat(item[0], \"=\").concat(item[1], \";\"));\n                }, \"\");\n            }\n        }\n    } else {\n        document.cookie = cookieStr;\n    }\n};\nexports.setCookie = setCookie;\n/**\n * @deprecated setCookies was deprecated. It will be deleted in the new version. Use setCookie instead.\n */ var setCookies = function(key, data, options) {\n    console.warn(\"[WARN]: setCookies was deprecated. It will be deleted in the new version. Use setCookie instead.\");\n    return (0, exports.setCookie)(key, data, options);\n};\nexports.setCookies = setCookies;\nvar deleteCookie = function(key, options) {\n    return (0, exports.setCookie)(key, \"\", __assign(__assign({}, options), {\n        maxAge: -1\n    }));\n};\nexports.deleteCookie = deleteCookie;\n/**\n * @deprecated removeCookies was deprecated. It will be deleted in the new version. Use deleteCookie instead.\n */ var removeCookies = function(key, options) {\n    console.warn(\"[WARN]: removeCookies was deprecated. It will be deleted in the new version. Use deleteCookie instead.\");\n    return (0, exports.deleteCookie)(key, options);\n};\nexports.removeCookies = removeCookies;\nvar hasCookie = function(key, options) {\n    if (!key) return false;\n    var cookie = (0, exports.getCookies)(options);\n    return cookie.hasOwnProperty(key);\n};\nexports.hasCookie = hasCookie;\n/**\n * @deprecated checkCookies was deprecated. It will be deleted in the new version. Use hasCookie instead.\n */ var checkCookies = function(key, options) {\n    console.warn(\"[WARN]: checkCookies was deprecated. It will be deleted in the new version. Use hasCookie instead.\");\n    return (0, exports.hasCookie)(key, options);\n};\nexports.checkCookies = checkCookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29va2llcy1uZXh0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFdBQVcsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxRQUFRLElBQUs7SUFDdENBLFdBQVdDLE9BQU9DLE1BQU0sSUFBSSxTQUFTQyxDQUFDO1FBQ2xDLElBQUssSUFBSUMsR0FBR0MsSUFBSSxHQUFHQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVILElBQUlDLEdBQUdELElBQUs7WUFDakRELElBQUlHLFNBQVMsQ0FBQ0YsRUFBRTtZQUNoQixJQUFLLElBQUlJLEtBQUtMLEVBQUcsSUFBSUgsT0FBT1MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1IsR0FBR0ssSUFDekROLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7UUFDbkI7UUFDQSxPQUFPTjtJQUNYO0lBQ0EsT0FBT0gsU0FBU2EsS0FBSyxDQUFDLElBQUksRUFBRU47QUFDaEM7QUFDQSxJQUFJTyxTQUFTLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsTUFBTSxJQUFLLFNBQVVWLENBQUMsRUFBRVcsQ0FBQztJQUNoRCxJQUFJWixJQUFJLENBQUM7SUFDVCxJQUFLLElBQUlNLEtBQUtMLEVBQUcsSUFBSUgsT0FBT1MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1IsR0FBR0ssTUFBTU0sRUFBRUMsT0FBTyxDQUFDUCxLQUFLLEdBQzlFTixDQUFDLENBQUNNLEVBQUUsR0FBR0wsQ0FBQyxDQUFDSyxFQUFFO0lBQ2YsSUFBSUwsS0FBSyxRQUFRLE9BQU9ILE9BQU9nQixxQkFBcUIsS0FBSyxZQUNyRCxJQUFLLElBQUlaLElBQUksR0FBR0ksSUFBSVIsT0FBT2dCLHFCQUFxQixDQUFDYixJQUFJQyxJQUFJSSxFQUFFRCxNQUFNLEVBQUVILElBQUs7UUFDcEUsSUFBSVUsRUFBRUMsT0FBTyxDQUFDUCxDQUFDLENBQUNKLEVBQUUsSUFB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QUFDQXZDLGlCQUFpQixHQUFHRztBQUNwQjs7Q0FFQyxHQUNELElBQUlELGVBQWUsU0FBVXFDLEdBQUcsRUFBRWhCLE9BQU87SUFDckNxQyxRQUFRQyxJQUFJLENBQUM7SUFDYixPQUFPLENBQUMsR0FBRzdELFFBQVFHLFNBQVMsRUFBRW9DLEtBQUtoQjtBQUN2QztBQUNBdkIsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXptYXJ0Ly4vbm9kZV9tb2R1bGVzL2Nvb2tpZXMtbmV4dC9saWIvaW5kZXguanM/ZjI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoZWNrQ29va2llcyA9IGV4cG9ydHMuaGFzQ29va2llID0gZXhwb3J0cy5yZW1vdmVDb29raWVzID0gZXhwb3J0cy5kZWxldGVDb29raWUgPSBleHBvcnRzLnNldENvb2tpZXMgPSBleHBvcnRzLnNldENvb2tpZSA9IGV4cG9ydHMuZ2V0Q29va2llID0gZXhwb3J0cy5nZXRDb29raWVzID0gdm9pZCAwO1xudmFyIGNvb2tpZV8xID0gcmVxdWlyZShcImNvb2tpZVwiKTtcbnZhciBpc0NsaWVudFNpZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJzsgfTtcbnZhciBwcm9jZXNzVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09ICd0cnVlJylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHZhbHVlID09PSAnZmFsc2UnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHZhbHVlID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAodmFsdWUgPT09ICdudWxsJylcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgeyB2YWx1ZSA9ICcnOyB9XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICgvXltcXHtcXFtdLy50ZXN0KHJlc3VsdCkpID8gcmVzdWx0IDogdmFsdWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59O1xudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAoIXN0cilcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyglWzAtOUEtWl17Mn0pKy9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xufTtcbnZhciBnZXRDb29raWVzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVxO1xuICAgIGlmIChvcHRpb25zKVxuICAgICAgICByZXEgPSBvcHRpb25zLnJlcTtcbiAgICBpZiAoIWlzQ2xpZW50U2lkZSgpKSB7XG4gICAgICAgIC8vIGlmIGNvb2tpZS1wYXJzZXIgaXMgdXNlZCBpbiBwcm9qZWN0IGdldCBjb29raWVzIGZyb20gY3R4LnJlcS5jb29raWVzXG4gICAgICAgIC8vIGlmIGNvb2tpZS1wYXJzZXIgaXNuJ3QgdXNlZCBpbiBwcm9qZWN0IGdldCBjb29raWVzIGZyb20gY3R4LnJlcS5oZWFkZXJzLmNvb2tpZVxuICAgICAgICBpZiAocmVxICYmIHJlcS5jb29raWVzKVxuICAgICAgICAgICAgcmV0dXJuIHJlcS5jb29raWVzO1xuICAgICAgICBpZiAocmVxICYmIHJlcS5oZWFkZXJzICYmIHJlcS5oZWFkZXJzLmNvb2tpZSlcbiAgICAgICAgICAgIHJldHVybiAoMCwgY29va2llXzEucGFyc2UpKHJlcS5oZWFkZXJzLmNvb2tpZSk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIF9jb29raWVzID0ge307XG4gICAgdmFyIGRvY3VtZW50Q29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkb2N1bWVudENvb2tpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGNvb2tpZVBhcnRzID0gZG9jdW1lbnRDb29raWVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgIHZhciBfY29va2llID0gY29va2llUGFydHMuc2xpY2UoMSkuam9pbignPScpO1xuICAgICAgICB2YXIgbmFtZV8xID0gY29va2llUGFydHNbMF07XG4gICAgICAgIF9jb29raWVzW25hbWVfMV0gPSBfY29va2llO1xuICAgIH1cbiAgICByZXR1cm4gX2Nvb2tpZXM7XG59O1xuZXhwb3J0cy5nZXRDb29raWVzID0gZ2V0Q29va2llcztcbnZhciBnZXRDb29raWUgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9jb29raWVzID0gKDAsIGV4cG9ydHMuZ2V0Q29va2llcykob3B0aW9ucyk7XG4gICAgdmFyIHZhbHVlID0gX2Nvb2tpZXNba2V5XTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlKGRlY29kZSh2YWx1ZSkpO1xufTtcbmV4cG9ydHMuZ2V0Q29va2llID0gZ2V0Q29va2llO1xudmFyIHNldENvb2tpZSA9IGZ1bmN0aW9uIChrZXksIGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2Nvb2tpZU9wdGlvbnM7XG4gICAgdmFyIF9yZXE7XG4gICAgdmFyIF9yZXM7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJlcSA9IG9wdGlvbnMucmVxLCByZXMgPSBvcHRpb25zLnJlcywgX29wdGlvbnMgPSBfX3Jlc3Qob3B0aW9ucywgW1wicmVxXCIsIFwicmVzXCJdKTtcbiAgICAgICAgX3JlcSA9IHJlcTtcbiAgICAgICAgX3JlcyA9IHJlcztcbiAgICAgICAgX2Nvb2tpZU9wdGlvbnMgPSBfb3B0aW9ucztcbiAgICB9XG4gICAgdmFyIGNvb2tpZVN0ciA9ICgwLCBjb29raWVfMS5zZXJpYWxpemUpKGtleSwgc3RyaW5naWZ5KGRhdGEpLCBfX2Fzc2lnbih7IHBhdGg6ICcvJyB9LCBfY29va2llT3B0aW9ucykpO1xuICAgIGlmICghaXNDbGllbnRTaWRlKCkpIHtcbiAgICAgICAgaWYgKF9yZXMgJiYgX3JlcSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDb29raWVzID0gX3Jlcy5nZXRIZWFkZXIoJ1NldC1Db29raWUnKTtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjdXJyZW50Q29va2llcykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29va2llcyA9ICFjdXJyZW50Q29va2llcyA/IFtdIDogW1N0cmluZyhjdXJyZW50Q29va2llcyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3Jlcy5zZXRIZWFkZXIoJ1NldC1Db29raWUnLCBjdXJyZW50Q29va2llcy5jb25jYXQoY29va2llU3RyKSk7XG4gICAgICAgICAgICBpZiAoX3JlcSAmJiBfcmVxLmNvb2tpZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2Nvb2tpZXMgPSBfcmVxLmNvb2tpZXM7XG4gICAgICAgICAgICAgICAgZGF0YSA9PT0gJycgPyBkZWxldGUgX2Nvb2tpZXNba2V5XSA6IF9jb29raWVzW2tleV0gPSBzdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3JlcSAmJiBfcmVxLmhlYWRlcnMgJiYgX3JlcS5oZWFkZXJzLmNvb2tpZSkge1xuICAgICAgICAgICAgICAgIHZhciBfY29va2llcyA9ICgwLCBjb29raWVfMS5wYXJzZSkoX3JlcS5oZWFkZXJzLmNvb2tpZSk7XG4gICAgICAgICAgICAgICAgZGF0YSA9PT0gJycgPyBkZWxldGUgX2Nvb2tpZXNba2V5XSA6IF9jb29raWVzW2tleV0gPSBzdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgICAgICAgICAgX3JlcS5oZWFkZXJzLmNvb2tpZSA9IE9iamVjdC5lbnRyaWVzKF9jb29raWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtLCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bS5jb25jYXQoXCJcIi5jb25jYXQoaXRlbVswXSwgXCI9XCIpLmNvbmNhdChpdGVtWzFdLCBcIjtcIikpO1xuICAgICAgICAgICAgICAgIH0sICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llU3RyO1xuICAgIH1cbn07XG5leHBvcnRzLnNldENvb2tpZSA9IHNldENvb2tpZTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2V0Q29va2llcyB3YXMgZGVwcmVjYXRlZC4gSXQgd2lsbCBiZSBkZWxldGVkIGluIHRoZSBuZXcgdmVyc2lvbi4gVXNlIHNldENvb2tpZSBpbnN0ZWFkLlxuICovXG52YXIgc2V0Q29va2llcyA9IGZ1bmN0aW9uIChrZXksIGRhdGEsIG9wdGlvbnMpIHtcbiAgICBjb25zb2xlLndhcm4oJ1tXQVJOXTogc2V0Q29va2llcyB3YXMgZGVwcmVjYXRlZC4gSXQgd2lsbCBiZSBkZWxldGVkIGluIHRoZSBuZXcgdmVyc2lvbi4gVXNlIHNldENvb2tpZSBpbnN0ZWFkLicpO1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5zZXRDb29raWUpKGtleSwgZGF0YSwgb3B0aW9ucyk7XG59O1xuZXhwb3J0cy5zZXRDb29raWVzID0gc2V0Q29va2llcztcbnZhciBkZWxldGVDb29raWUgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLnNldENvb2tpZSkoa2V5LCAnJywgX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IG1heEFnZTogLTEgfSkpO1xufTtcbmV4cG9ydHMuZGVsZXRlQ29va2llID0gZGVsZXRlQ29va2llO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCByZW1vdmVDb29raWVzIHdhcyBkZXByZWNhdGVkLiBJdCB3aWxsIGJlIGRlbGV0ZWQgaW4gdGhlIG5ldyB2ZXJzaW9uLiBVc2UgZGVsZXRlQ29va2llIGluc3RlYWQuXG4gKi9cbnZhciByZW1vdmVDb29raWVzID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucykge1xuICAgIGNvbnNvbGUud2FybignW1dBUk5dOiByZW1vdmVDb29raWVzIHdhcyBkZXByZWNhdGVkLiBJdCB3aWxsIGJlIGRlbGV0ZWQgaW4gdGhlIG5ldyB2ZXJzaW9uLiBVc2UgZGVsZXRlQ29va2llIGluc3RlYWQuJyk7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmRlbGV0ZUNvb2tpZSkoa2V5LCBvcHRpb25zKTtcbn07XG5leHBvcnRzLnJlbW92ZUNvb2tpZXMgPSByZW1vdmVDb29raWVzO1xudmFyIGhhc0Nvb2tpZSA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoIWtleSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBjb29raWUgPSAoMCwgZXhwb3J0cy5nZXRDb29raWVzKShvcHRpb25zKTtcbiAgICByZXR1cm4gY29va2llLmhhc093blByb3BlcnR5KGtleSk7XG59O1xuZXhwb3J0cy5oYXNDb29raWUgPSBoYXNDb29raWU7XG4vKipcbiAqIEBkZXByZWNhdGVkIGNoZWNrQ29va2llcyB3YXMgZGVwcmVjYXRlZC4gSXQgd2lsbCBiZSBkZWxldGVkIGluIHRoZSBuZXcgdmVyc2lvbi4gVXNlIGhhc0Nvb2tpZSBpbnN0ZWFkLlxuICovXG52YXIgY2hlY2tDb29raWVzID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucykge1xuICAgIGNvbnNvbGUud2FybignW1dBUk5dOiBjaGVja0Nvb2tpZXMgd2FzIGRlcHJlY2F0ZWQuIEl0IHdpbGwgYmUgZGVsZXRlZCBpbiB0aGUgbmV3IHZlcnNpb24uIFVzZSBoYXNDb29raWUgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMuaGFzQ29va2llKShrZXksIG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuY2hlY2tDb29raWVzID0gY2hlY2tDb29raWVzO1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9fcmVzdCIsImUiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWNrQ29va2llcyIsImhhc0Nvb2tpZSIsInJlbW92ZUNvb2tpZXMiLCJkZWxldGVDb29raWUiLCJzZXRDb29raWVzIiwic2V0Q29va2llIiwiZ2V0Q29va2llIiwiZ2V0Q29va2llcyIsImNvb2tpZV8xIiwicmVxdWlyZSIsImlzQ2xpZW50U2lkZSIsInByb2Nlc3NWYWx1ZSIsInVuZGVmaW5lZCIsInN0cmluZ2lmeSIsInJlc3VsdCIsIkpTT04iLCJ0ZXN0IiwiZGVjb2RlIiwic3RyIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsIm9wdGlvbnMiLCJyZXEiLCJjb29raWVzIiwiaGVhZGVycyIsImNvb2tpZSIsInBhcnNlIiwiX2Nvb2tpZXMiLCJkb2N1bWVudENvb2tpZXMiLCJkb2N1bWVudCIsInNwbGl0IiwibGVuIiwiY29va2llUGFydHMiLCJfY29va2llIiwic2xpY2UiLCJqb2luIiwibmFtZV8xIiwia2V5IiwiZGF0YSIsIl9jb29raWVPcHRpb25zIiwiX3JlcSIsIl9yZXMiLCJyZXMiLCJfb3B0aW9ucyIsImNvb2tpZVN0ciIsInNlcmlhbGl6ZSIsInBhdGgiLCJjdXJyZW50Q29va2llcyIsImdldEhlYWRlciIsIkFycmF5IiwiaXNBcnJheSIsIlN0cmluZyIsInNldEhlYWRlciIsImNvbmNhdCIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2N1bSIsIml0ZW0iLCJjb25zb2xlIiwid2FybiIsIm1heEFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cookies-next/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cookies-next/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/cookies-next/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkCookies = exports.hasCookie = exports.removeCookies = exports.deleteCookie = exports.setCookies = exports.setCookie = exports.getCookie = exports.getCookies = void 0;\nvar cookie_1 = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\nvar isClientSide = function() {\n    return \"undefined\" !== \"undefined\";\n};\nvar processValue = function(value) {\n    if (value === \"true\") return true;\n    if (value === \"false\") return false;\n    if (value === \"undefined\") return undefined;\n    if (value === \"null\") return null;\n    return value;\n};\nvar stringify = function(value) {\n    if (value === void 0) {\n        value = \"\";\n    }\n    try {\n        var result = JSON.stringify(value);\n        return /^[\\{\\[]/.test(result) ? result : value;\n    } catch (e) {\n        return value;\n    }\n};\nvar decode = function(str) {\n    if (!str) return str;\n    return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar getCookies = function(options) {\n    var req;\n    if (options) req = options.req;\n    if (!isClientSide()) {\n        // if cookie-parser is used in project get cookies from ctx.req.cookies\n        // if cookie-parser isn't used in project get cookies from ctx.req.headers.cookie\n        if (req && req.cookies) return req.cookies;\n        if (req && req.headers && req.headers.cookie) return (0, cookie_1.parse)(req.headers.cookie);\n        return {};\n    }\n    var _cookies = {};\n    var documentCookies = document.cookie ? document.cookie.split(\"; \") : [];\n    for(var i = 0, len = documentCookies.length; i < len; i++){\n        var cookieParts = documentCookies[i].split(\"=\");\n        var _cookie = cookieParts.slice(1).join(\"=\");\n        var name_1 = cookieParts[0];\n        _cookies[name_1] = _cookie;\n    }\n    return _cookies;\n};\nexports.getCookies = getCookies;\nvar getCookie = function(key, options) {\n    var _cookies = (0, exports.getCookies)(options);\n    var value = _cookies[key];\n    if (value === undefined) return undefined;\n    return processValue(decode(value));\n};\nexports.getCookie = getCookie;\nvar setCookie = function(key, data, options) {\n    var _cookieOptions;\n    var _req;\n    var _res;\n    if (options) {\n        var req = options.req, res = options.res, _options = __rest(options, [\n            \"req\",\n            \"res\"\n        ]);\n        _req = req;\n        _res = res;\n        _cookieOptions = _options;\n    }\n    var cookieStr = (0, cookie_1.serialize)(key, stringify(data), __assign({\n        path: \"/\"\n    }, _cookieOptions));\n    if (!isClientSide()) {\n        if (_res && _req) {\n            var currentCookies = _res.getHeader(\"Set-Cookie\");\n            if (!Array.isArray(currentCookies)) {\n                currentCookies = !currentCookies ? [] : [\n                    String(currentCookies)\n                ];\n            }\n            _res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n            if (_req && _req.cookies) {\n                var _cookies = _req.cookies;\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n            }\n            if (_req && _req.headers && _req.headers.cookie) {\n                var _cookies = (0, cookie_1.parse)(_req.headers.cookie);\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n                _req.headers.cookie = Object.entries(_cookies).reduce(function(accum, item) {\n                    return accum.concat(\"\".concat(item[0], \"=\").concat(item[1], \";\"));\n                }, \"\");\n            }\n        }\n    } else {\n        document.cookie = cookieStr;\n    }\n};\nexports.setCookie = setCookie;\n/**\n * @deprecated setCookies was deprecated. It will be deleted in the new version. Use setCookie instead.\n */ var setCookies = function(key, data, options) {\n    console.warn(\"[WARN]: setCookies was deprecated. It will be deleted in the new version. Use setCookie instead.\");\n    return (0, exports.setCookie)(key, data, options);\n};\nexports.setCookies = setCookies;\nvar deleteCookie = function(key, options) {\n    return (0, exports.setCookie)(key, \"\", __assign(__assign({}, options), {\n        maxAge: -1\n    }));\n};\nexports.deleteCookie = deleteCookie;\n/**\n * @deprecated removeCookies was deprecated. It will be deleted in the new version. Use deleteCookie instead.\n */ var removeCookies = function(key, options) {\n    console.warn(\"[WARN]: removeCookies was deprecated. It will be deleted in the new version. Use deleteCookie instead.\");\n    return (0, exports.deleteCookie)(key, options);\n};\nexports.removeCookies = removeCookies;\nvar hasCookie = function(key, options) {\n    if (!key) return false;\n    var cookie = (0, exports.getCookies)(options);\n    return cookie.hasOwnProperty(key);\n};\nexports.hasCookie = hasCookie;\n/**\n * @deprecated checkCookies was deprecated. It will be deleted in the new version. Use hasCookie instead.\n */ var checkCookies = function(key, options) {\n    console.warn(\"[WARN]: checkCookies was deprecated. It will be deleted in the new version. Use hasCookie instead.\");\n    return (0, exports.hasCookie)(key, options);\n};\nexports.checkCookies = checkCookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cookies-next/lib/index.js\n");

/***/ })

};
;