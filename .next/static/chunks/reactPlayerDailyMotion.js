"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerDailyMotion"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/DailyMotion.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-player/lazy/players/DailyMotion.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://api.dmcdn.net/all.js\";\nvar SDK_GLOBAL = \"DM\";\nvar SDK_GLOBAL_READY = \"dmAsyncInit\";\nvar DailyMotion = /*#__PURE__*/ function(_Component) {\n    _inherits(DailyMotion, _Component);\n    var _super = _createSuper(DailyMotion);\n    function DailyMotion() {\n        var _this;\n        _classCallCheck(this, DailyMotion);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationChange\", function() {\n            var duration = _this.getDuration();\n            _this.props.onDuration(duration);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(DailyMotion, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError = _this$props.onError, playing = _this$props.playing;\n                var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray(_url$match, 2), id = _url$match2[1];\n                if (this.player) {\n                    this.player.load(id, {\n                        start: (0, _utils.parseStartTime)(url),\n                        autoplay: playing\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {\n                    return DM.player;\n                }).then(function(DM) {\n                    if (!_this2.container) return;\n                    var Player = DM.player;\n                    _this2.player = new Player(_this2.container, {\n                        width: \"100%\",\n                        height: \"100%\",\n                        video: id,\n                        params: _objectSpread({\n                            controls: controls,\n                            autoplay: _this2.props.playing,\n                            mute: _this2.props.muted,\n                            start: (0, _utils.parseStartTime)(url),\n                            origin: window.location.origin\n                        }, config.params),\n                        events: {\n                            apiready: _this2.props.onReady,\n                            seeked: function seeked() {\n                                return _this2.props.onSeek(_this2.player.currentTime);\n                            },\n                            video_end: _this2.props.onEnded,\n                            durationchange: _this2.onDurationChange,\n                            pause: _this2.props.onPause,\n                            playing: _this2.props.onPlay,\n                            waiting: _this2.props.onBuffer,\n                            error: function error(event) {\n                                return onError(event);\n                            }\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.player.duration || null;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.player.bufferedTime;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return DailyMotion;\n}(_react.Component);\nexports[\"default\"] = DailyMotion;\n_defineProperty(DailyMotion, \"displayName\", \"DailyMotion\");\n_defineProperty(DailyMotion, \"canPlay\", _patterns.canPlay.dailymotion);\n_defineProperty(DailyMotion, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/DailyMotion.js\n"));

/***/ })

}]);