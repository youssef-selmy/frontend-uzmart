"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerVimeo"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Vimeo.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Vimeo.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.vimeo.com/api/player.js\";\nvar SDK_GLOBAL = \"Vimeo\";\nvar cleanUrl = function cleanUrl(url) {\n    return url.replace(\"/manage/videos\", \"\");\n};\nvar Vimeo = /*#__PURE__*/ function(_Component) {\n    _inherits(Vimeo, _Component);\n    var _super = _createSuper(Vimeo);\n    function Vimeo() {\n        var _this;\n        _classCallCheck(this, Vimeo);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setMuted(true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.setMuted(false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vimeo, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                this.duration = null;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo) {\n                    if (!_this2.container) return;\n                    var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;\n                    _this2.player = new Vimeo.Player(_this2.container, _objectSpread({\n                        url: cleanUrl(url),\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        loop: _this2.props.loop,\n                        playsinline: _this2.props.playsinline,\n                        controls: _this2.props.controls\n                    }, playerOptions));\n                    _this2.player.ready().then(function() {\n                        var iframe = _this2.container.querySelector(\"iframe\");\n                        iframe.style.width = \"100%\";\n                        iframe.style.height = \"100%\";\n                        if (title) {\n                            iframe.title = title;\n                        }\n                    })[\"catch\"](_this2.props.onError);\n                    _this2.player.on(\"loaded\", function() {\n                        _this2.props.onReady();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"play\", function() {\n                        _this2.props.onPlay();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", function(e) {\n                        return _this2.props.onSeek(e.seconds);\n                    });\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var seconds = _ref.seconds;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"progress\", function(_ref2) {\n                        var seconds = _ref2.seconds;\n                        _this2.secondsLoaded = seconds;\n                    });\n                    _this2.player.on(\"bufferstart\", _this2.props.onBuffer);\n                    _this2.player.on(\"bufferend\", _this2.props.onBufferEnd);\n                    _this2.player.on(\"playbackratechange\", function(e) {\n                        return _this2.props.onPlaybackRateChange(e.playbackRate);\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"refreshDuration\",\n            value: function refreshDuration() {\n                var _this3 = this;\n                this.player.getDuration().then(function(duration) {\n                    _this3.duration = duration;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.callPlayer(\"play\");\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"unload\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setMuted\",\n            value: function setMuted(muted) {\n                this.callPlayer(\"setMuted\", muted);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    overflow: \"hidden\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    key: this.props.url,\n                    ref: this.ref,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Vimeo;\n}(_react.Component);\nexports[\"default\"] = Vimeo;\n_defineProperty(Vimeo, \"displayName\", \"Vimeo\");\n_defineProperty(Vimeo, \"canPlay\", _patterns.canPlay.vimeo);\n_defineProperty(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Vimeo.js\n"));

/***/ })

}]);