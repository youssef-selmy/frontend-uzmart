"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerWistia"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Wistia.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Wistia.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nvar SDK_GLOBAL = \"Wistia\";\nvar PLAYER_ID_PREFIX = \"wistia-player-\";\nvar Wistia = /*#__PURE__*/ function(_Component) {\n    _inherits(Wistia, _Component);\n    var _super = _createSuper(Wistia);\n    function Wistia() {\n        var _this;\n        _classCallCheck(this, Wistia);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onPlay.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlaybackRateChange\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Wistia, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError = _this$props6.onError;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia) {\n                    if (config.customControls) {\n                        config.customControls.forEach(function(control) {\n                            return Wistia.defineControl(control);\n                        });\n                    }\n                    window._wq = window._wq || [];\n                    window._wq.push({\n                        id: _this2.playerID,\n                        options: _objectSpread({\n                            autoPlay: playing,\n                            silentAutoPlay: \"allow\",\n                            muted: muted,\n                            controlsVisibleOnLoad: controls,\n                            fullscreenButton: controls,\n                            playbar: controls,\n                            playbackRateControl: controls,\n                            qualityControl: controls,\n                            volumeControl: controls,\n                            settingsControl: controls,\n                            smallPlayButton: controls\n                        }, config.options),\n                        onReady: function onReady(player) {\n                            _this2.player = player;\n                            _this2.unbind();\n                            _this2.player.bind(\"play\", _this2.onPlay);\n                            _this2.player.bind(\"pause\", _this2.onPause);\n                            _this2.player.bind(\"seek\", _this2.onSeek);\n                            _this2.player.bind(\"end\", _this2.onEnded);\n                            _this2.player.bind(\"playbackratechange\", _this2.onPlaybackRateChange);\n                            _onReady();\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"unbind\",\n            value: function unbind() {\n                this.player.unbind(\"play\", this.onPlay);\n                this.player.unbind(\"pause\", this.onPause);\n                this.player.unbind(\"seek\", this.onSeek);\n                this.player.unbind(\"end\", this.onEnded);\n                this.player.unbind(\"playbackratechange\", this.onPlaybackRateChange);\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.unbind();\n                this.callPlayer(\"remove\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"time\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"volume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"playbackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"duration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"time\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var url = this.props.url;\n                var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];\n                var className = \"wistia_embed wistia_async_\".concat(videoID);\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    id: this.playerID,\n                    key: videoID,\n                    className: className,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Wistia;\n}(_react.Component);\nexports[\"default\"] = Wistia;\n_defineProperty(Wistia, \"displayName\", \"Wistia\");\n_defineProperty(Wistia, \"canPlay\", _patterns.canPlay.wistia);\n_defineProperty(Wistia, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Wistia.js\n"));

/***/ })

}]);