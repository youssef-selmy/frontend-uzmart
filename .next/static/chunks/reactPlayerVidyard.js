"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerVidyard"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Vidyard.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Vidyard.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nvar SDK_GLOBAL = \"VidyardV4\";\nvar SDK_GLOBAL_READY = \"onVidyardAPI\";\nvar Vidyard = /*#__PURE__*/ function(_Component) {\n    _inherits(Vidyard, _Component);\n    var _super = _createSuper(Vidyard);\n    function Vidyard() {\n        var _this;\n        _classCallCheck(this, Vidyard);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vidyard, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError = _this$props.onError, onDuration = _this$props.onDuration;\n                var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];\n                if (this.player) {\n                    this.stop();\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard) {\n                    if (!_this2.container) return;\n                    Vidyard.api.addReadyListener(function(data, player) {\n                        if (_this2.player) {\n                            return;\n                        }\n                        _this2.player = player;\n                        _this2.player.on(\"ready\", _this2.props.onReady);\n                        _this2.player.on(\"play\", _this2.props.onPlay);\n                        _this2.player.on(\"pause\", _this2.props.onPause);\n                        _this2.player.on(\"seek\", _this2.props.onSeek);\n                        _this2.player.on(\"playerComplete\", _this2.props.onEnded);\n                    }, id);\n                    Vidyard.api.renderPlayer(_objectSpread({\n                        uuid: id,\n                        container: _this2.container,\n                        autoplay: playing ? 1 : 0\n                    }, config.options));\n                    Vidyard.api.getPlayerMetadata(id).then(function(meta) {\n                        _this2.duration = meta.length_in_seconds;\n                        onDuration(meta.length_in_seconds);\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                window.VidyardV4.api.destroyPlayer(this.player);\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", amount);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackSpeed\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"currentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return Vidyard;\n}(_react.Component);\nexports[\"default\"] = Vidyard;\n_defineProperty(Vidyard, \"displayName\", \"Vidyard\");\n_defineProperty(Vidyard, \"canPlay\", _patterns.canPlay.vidyard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Vidyard.js\n"));

/***/ })

}]);